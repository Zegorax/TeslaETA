<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>Tesla - ShareMyETA</title>
    <meta name="robots" content="noindex, nofollow"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel='stylesheet' />

    <script src="{{ url_for('static', filename='tailwind.css') }}"></script>

    <link href="{{ url_for('static', filename='fontawesome/css/fontawesome.min.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='fontawesome/css/solid.min.css') }}" rel="stylesheet">
</head>
<body class="p-0 m-0">
<div id="map" class="absolute inset-0 w-full"></div>
<div class="fixed">
  <div class="fixed bottom-0 left-0 p-6 rounded-tr-lg bg-slate-900 text-white font-sans">
        <p id="instructions_eta"><i class="fa-solid fa-flag-checkered"></i> ... </p>
        <p id="instructions_distance"><i class="fa-solid fa-route"></i> ...</p>
        <p id="instructions_charge"><i class="fa-solid fa-battery-empty"></i> ...</p>
  </div>
</div>
<script>
    // Get start and end location from Python Jinja2
    const start = {{ start }};
    const end = {{ end }};
    const odometer_start = {{ odometer_start }}
    var routes_data = undefined
    //@TODO - Remove temp_i
    var temp_i = 0

    // create map
    mapboxgl.accessToken = '{{ mbtoken }}';
    const map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/navigation-guidance-day-v4', // stylesheet location
        zoom: 12,
        center: start
    });

    // create a function to make a directions request
    async function getRoute(end) {
        // make directions request using driving-traffic profile
        const query = await fetch(
            `https://api.mapbox.com/directions/v5/mapbox/driving-traffic/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&overview=full&access_token=${mapboxgl.accessToken}`,
            {method: 'GET'}
        );
        const json = await query.json();
        routes_data = json.routes[0];
        const route = routes_data.geometry.coordinates;
        const geojson = {
            'type': 'Feature',
            'properties': {},
            'geometry': {
                'type': 'LineString',
                'coordinates': route
            }
        };
        // if the route already exists on the map, we'll reset it using setData
        if (map.getSource('route')) {
            map.getSource('route').setData(geojson);
        }
        // otherwise, we'll make a new request
        else {
            map.addLayer({
                'id': 'route',
                'type': 'line',
                'source': {
                    'type': 'geojson',
                    'data': geojson
                },
                'layout': {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                'paint': {
                    'line-color': '#3887be',
                    'line-width': 5,
                    'line-opacity': 0.75
                }
            });
        }
    }

    // GET PULSING DOT //
    const size = 200;

    // This implements `StyleImageInterface`
    // to draw a pulsing dot icon on the map.
    const pulsingDot = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

    // When the layer is added to the map,
    // get the rendering context for the map canvas.
        onAdd: function () {
            const canvas = document.createElement('canvas');
            canvas.width = this.width;
            canvas.height = this.height;
            this.context = canvas.getContext('2d');
        },

    // Call once before every frame where the icon will be used.
        render: function () {
            const duration = 1000;
            const t = (performance.now() % duration) / duration;

            const radius = (size / 2) * 0.3;
            const outerRadius = (size / 2) * 0.7 * t + radius;
            const context = this.context;

    // Draw the outer circle.
            context.clearRect(0, 0, this.width, this.height);
            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                outerRadius,
                0,
                Math.PI * 2
            );
            context.fillStyle = `rgba(255, 200, 200, ${1 - t})`;
            context.fill();

    // Draw the inner circle.
            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                radius,
                0,
                Math.PI * 2
            );
            context.fillStyle = 'rgba(255, 100, 100, 1)';
            context.strokeStyle = 'white';
            context.lineWidth = 2 + 4 * (1 - t);
            context.fill();
            context.stroke();

    // Update this image's data with data from the canvas.
            this.data = context.getImageData(
                0,
                0,
                this.width,
                this.height
            ).data;

    // Continuously repaint the map, resulting
    // in the smooth animation of the dot.
            map.triggerRepaint();

    // Return `true` to let the map know that the image was updated.
            return true;
        }
    };

    map.on('load', async () => {
        // Add pulsing dot icon //
        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });

        // ROUTING LOGIC //


        // make an initial directions request that
        // starts and ends at the same location
        getRoute(start);

        // Add destination to the map
        const marker = new mapboxgl.Marker({
            draggable: false
        }).setLngLat(end)
            .addTo(map);

        // Set route destination
        await getRoute(end)

        // UPDATE CAR LOCATION BELOW //

        // Get the initial location of the car.
        const geojson = await getLocation();
        // Add the ISS location as a source.
        map.addSource('car', {
            type: 'geojson',
            data: geojson
        });
        // Add the rocket symbol layer to the map.
        map.addLayer({
            'id': 'car',
            'type': 'symbol',
            'source': 'car',
            'layout': {
                // This icon is a part of the Mapbox Streets style.
                // To view all images available in a Mapbox style, open
                // the style in Mapbox Studio and click the "Images" tab.
                // To add a new image to the style at runtime see
                // https://docs.mapbox.com/mapbox-gl-js/example/add-image/
                'icon-image': 'pulsing-dot'
            }
        });

        // Update the source from the API every 5 seconds.
        const updateSource = setInterval(async () => {
            const geojson = await getLocation(updateSource);
            map.getSource('car').setData(geojson);
        }, 5000);

        async function getLocation(updateSource) {
            // Make a GET request to the API and return the location of the car.
            try {
                const response = await fetch(
                    '{{ BASE_URL }}/carstate/{{ shortuuid }}',
                    {method: 'GET'}
                );
                const {latitude, longitude, odometer, driving, charging, battery_level} = await response.json();
                // Fly the map to the location.
                map.flyTo({
                    center: [longitude, latitude],
                    speed: 0.5
                });

                // LOGIC TO UPDATE INSTRUCTIONS 
                // calculate instructions content
                // Calculate Arrival Time
                var eta = new Date();
                eta.setSeconds(eta.getSeconds() + Math.round(routes_data.duration));
                const date_options = {
                    hour12 : false,
                    hour:  "numeric",
                    minute: "numeric",seconds:"numeric"
                }

                // IF driving === false then add 5 seconds (the refresh rate of this async request)
                if (driving === false) {
                    eta.setSeconds(eta.getSeconds() + 5);
                }
        
                // get the sidebar and add the instructions
                // Update ETA on load
                const instructions_eta = document.getElementById('instructions_eta');
                instructions_eta.innerHTML = `<i class="fa-solid fa-flag-checkered"></i> ${eta.toLocaleTimeString("en-GB",date_options)}`;

                // Update the Distance Estimation based on the Odometer compared to the routing estimate
                odo_distance = routes_data.distance/1000 + odometer_start[0] - odometer
                const instructions_distance = document.getElementById('instructions_distance')
                instructions_distance.innerHTML = `<i class="fa-solid fa-route"></i> ${Math.round(odo_distance)} km`;

                // Update the Charge Value
                const instructions_charge = document.getElementById('instructions_charge')
                if (charging === false) {
                    if (battery_level >= 80) {
                        instructions_charge.innerHTML = `<i class="fa-solid fa-battery-full"></i> ${Math.round(battery_level)}%`
                    } else if (battery_level >= 60) {
                        instructions_charge.innerHTML = `<i class="fa-solid fa-battery-three-quarters"></i> ${Math.round(battery_level)}%`
                    } else if (battery_level > 40) {
                        instructions_charge.innerHTML = `<i class="fa-solid fa-battery-half"></i> ${Math.round(battery_level)}%`
                    } else if (battery_level > 20) {
                        instructions_charge.innerHTML = `<i class="fa-solid fa-battery-quarter"></i> ${Math.round(battery_level)}%`
                    } else {
                        instructions_charge.innerHTML = `<i class="fa-solid fa-battery-empty"></i> ${Math.round(battery_level)}%`
                    }
                } else {
                    instructions_charge.innerHTML = `<i class="fa-solid fa-charging-station"></i> ${Math.round(battery_level)}%`;
                }

                // Return the location of the car as GeoJSON.
                return {
                    'type': 'FeatureCollection',
                    'features': [
                        {
                            'type': 'Feature',
                            'geometry': {
                                'type': 'Point',
                                'coordinates': [longitude, latitude]
                            }
                        }
                    ]
                };
            } catch (err) {
                // If the updateSource interval is defined, clear the interval to stop updating the source.
                if (updateSource) clearInterval(updateSource);
                throw new Error(err);
            }
        }

    });

</script>
</body>
</html>
